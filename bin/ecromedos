#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# Desc:    This file is part of the ecromedos Document Preparation System
# Author:  Tobias Koch <tkoch@ecromedos.net>
# License: MIT
# URL:     http://www.ecromedos.net
#

# std includes
import os, sys, getopt, tempfile

# make ecromedos relocatable
ECMDS_INSTALL_DIR = os.path.normpath(
        os.path.dirname(
            os.path.realpath(sys.argv[0])
        ) + os.sep + ".." )

sys.path.insert(1, ECMDS_INSTALL_DIR + os.sep + 'lib')

# ecromedos includes
from net.ecromedos.error import ECMDSError, ECMDSPluginError
from net.ecromedos.ecmlprocessor import ECMLProcessor
import net.ecromedos.templates as document_templates

# exit values
ECMDS_ERR_INVOCATION = 1
ECMDS_ERR_PROCESSING = 2
ECMDS_ERR_UNKNOWN    = 3

# version number
VERSION = "3.0.0"

def printVersion():
    """Display version information."""

    print("ecromedos Document Processor, version %s" % (VERSION,))
    print("Copyright (C) 2005-2016, Tobias Koch <tobias@tobijk.de>")
#end function

def printUsage():
    """Display usage information."""

    print("                                                                          ")
    print("Usage: ecromedos [OPTIONS] <sourcefile>                                   ")
    print("                                                                          ")
    print("Options:                                                                  ")
    print("                                                                          ")
    print(" --draft            don't generate glossary or keyword indexes, which can ")
    print("                    save substantial amounts of time                      ")
    print(" --finedtp          activate pedantic typesetting, this can result in     ")
    print("                    overful horizontal boxes                              ")
    print(" --help, -h         display this information                              ")
    print(" --nohyperref       disable active links in PDF output                    ")
    print(" --novalid          skip validation of the document                       ")
    print("                                                                          ")
    print(" -b <directory>     use an alternative base directory from where to look  ")
    print("                    up the transformation rules                           ")
    print(" -c <file>          use an alternative configuration file                 ")
    print(" -f <format>        generate specified output format                      ")
    print("                    (xhtml, latex, pdflatex or xelatex)                   ")
    print(" -n <doctype>       start a new document of given doctype                 ")
    print("                    (article, book or report)                             ")
    print(" -s <file>          use an alternative style definition file              ") 
    print(" -v                 print version information and exit                    ")
#end function

def parseCmdLine():
    """Parse and extract arguments of command line options."""

    options = {}

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvn:f:s:b:c:",
            ["draft", "finedtp", "help", "nohyperref", "novalid"])
    except getopt.GetoptError as e:
        msg  = "Error while parsing command line: %s\n" % e.msg
        msg += "Type 'ecromedos --help' for more information."
        raise ECMDSError(msg)
    #end try

    params = options.setdefault("xsl_params", {})

    for o, v in opts:
        if o == "--draft":
            params["global.draft"] = "'yes'"
        elif o == "--finedtp":
            params["global.lazydtp"] = "'no'"
        elif o in [ "--help", "-h" ]:
            printVersion()
            printUsage()
            sys.exit(0)
        elif o == "--nohyperref":
            params["global.hyperref"] = "'no'"
        elif o == "--novalid":
            options["do_validate"] = False
        elif o == "-b":
            options["style_dir"] = v
        elif o == "-c":
            options["config_file"] = v
        elif o == "-f":
            options["target_format"] = v.lower()
        elif o == "-n":
            startDoc(v)
            sys.exit(0)
        elif o == "-s":
            if not os.path.isfile(v):
                msg = "Style definition file '%s' not found." % v
                raise ECMDSError(msg)
            else:
                v = os.path.abspath(v)
            #end if
            params["global.stylesheet"] = "document('%s')" % v
        elif o == "-v":
            printVersion()
            sys.exit(0)
        else:
            msg = "Unrecognized option '%s'.\n" % (o,)
            msg = "Type 'ecromedos --help' for more information."
            raise ECMDSError(msg)
        #end ifs
    #end while
    
    return options, args
#end function

def startDoc(doctype):
    """Outputs a template for a new document of "doctype" to stdout."""

    if not hasattr(document_templates, doctype):
        msg = "No template available for doctype '" + doctype + "'."
        raise ECMDSError(msg)
    else:
        template = document_templates.__dict__[doctype]
    #end if

    sys.stdout.write(template)
    sys.stdout.flush()
#end function

if __name__ == "__main__":
    try:
        # SETUP
        try:
            options, files = parseCmdLine()
            if len(files) < 1:
                msg = "ecromedos: no source file specified"
                raise ECMDSError(msg)
            if not os.path.isfile(files[0]):
                msg = "ecromedos: '%s' doesn't exist or is not a file"\
                    % files[0]
                raise ECMDSError(msg)
            #end ifs
        except ECMDSError as e:
            sys.stderr.write(e.msg() + "\n")
            sys.exit(ECMDS_ERR_INVOCATION)
        #end try

        # TRANSFORMATION
        try:
            with tempfile.TemporaryDirectory(prefix="ecmds-") as tmp_dir:
                # MAKE THE PROCESSOR USE THE TMPDIR CONTEXT
                options["tmp_dir"] = tmp_dir

                # SET INSTALLATION PATH
                options.setdefault("install_dir", ECMDS_INSTALL_DIR)

                # DO DOCUMENT TRANSFORMATION
                ECMLProcessor(options).process(files[0])
            #end with
        except ECMDSPluginError as e:
            msg = "Plugin '%s' caused an error:\n %s" % (e.pluginName(), e.msg())
            sys.stderr.write(msg + "\n")
            sys.exit(ECMDS_ERR_PROCESSING)
        except ECMDSError as e:
            sys.stderr.write(e.msg() + "\n")
            sys.exit(ECMDS_ERR_PROCESSING)
    except KeyboardInterrupt:
        sys.stdout.write("\n -> Caught SIGINT, terminating.\n")
#end __main__
